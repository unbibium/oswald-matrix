  processor 6502 

; This is supposed to generate a Matrix code rain effect
; with a large sprite array in the foreground.
;
; It is designed to be controlled from BASIC with parameters.
; for example, to run 500 iterations with sprite 2:
; SYS 49152,500,2
;
; the arcane method of performing the row multiplication is
; left over from a version that supported the VIC-20.

mscr = $FB
mcolor = $FD

WIDTH = 40
HEIGHT = 25
PAGES = 4
COLMEM = $D800
SCRMEM = $A000
SPRPTR = SCRMEM + $03F8

; BASIC routines to get SYS parameter
CHKCOM = $AEFD
GETNUM = $AD8A 
TOINT = $B7F7   ; Convert FAC#1 to Integer in LINNUM
; result of SYS parameter
LINNUM = $14
GETBYT = $B79E
SPRNUM = $12

; root of sprite data for
SPRPTR = SCRMEM + $03F8
SPRITEROOT = (SPRITEDATA & $3FC0) >> 6

  MAC NEXTRASTER
  LDA #{2}  ; scanline number
  STA $D012
  LDA # <{1}
  STA $0314
  LDA # >{1}
  STA $0315
  ENDM


MATRIX_INIT:
    echo "MATRIX = SYS", [.]d

; get iteration count from BASIC command
    JSR CHKCOM
    JSR GETNUM
    JSR TOINT
    JSR CHKCOM
    JSR GETBYT
    TXA
    EOR #$FF  ; start counting from end of memory
    ASL
    ASL
    ASL
    ASL
    STA SPRNUM
    STA $0400
    

INIT:
; turn screen black
    lda #0
    sta $d020
    sta $d021
; adjust screen memory if necessary
  IF SCRMEM > $3FFF
    LDA #(>SCRMEM ^ $C0) >> 6 | 148
    STA $DD00
  ENDIF
  if (SCRMEM & $3FFF) != $0400
    LDA #((>SCRMEM << 2) & $F0) |  5
    STA $D018
  ENDIF
; activate sprites
  LDX #7
  LDA #2 ; sprite color
BLLOOP
  STA $D027,X
  DEX
  BPL BLLOOP
  STX $D015 ; enable all sprites
  STX $D01D ; expand height
  STX $D017 ; expand width
  LDX #0
  STX $D01B ; behind it
  STX $D01C ; turn off multicolor
  LDX #16
pLLOOP
  LDA SPRPOS,X ; position
  STA $D000,X
  DEX
  BPL pLLOOP

; initialize sprite pointers
.INITSPRPTR
  LDY #7
  LDA #SPRITEROOT
  CLC
.LOOPS1
  STA SPRPTR,Y
  ADC #1
  DEY
  BPL .LOOPS1


; set up raster interrupts
  SEI
  LDA #$7F ; off all interrupte
  STA $DC0D ; CIA-1
  AND $D011
  STA $D011
  NEXTRASTER RASTERBLK,210
  LDA #1   ; enable raster interrupt signals
  STA $D01A
  CLI

; main loop
LOOP
    ldy #WIDTH-1
LOOP1:
    lda raindrops,y ;get raindrop position
    ; reset if >64
    cmp #HEIGHT+numcolors
    bcc LOOPA
    ; get random number -16 <= n <= -1
    jsr GETRAND
    ora #$F0
    sta raindrops,y
LOOPA:
    jsr MULROW
    ; see if (mscr),y falls within screen boundary
    ldx mscr+1
LOOPB:
    ; lower bound check
    cpx #>SCRMEM  
    bmi DRAWTRAIL 
    ; upper bound check
    cpx #>SCRMEM+PAGES-1
    bne .LOOPBC
.WHATCOMP
    ; we also need to guard the end of the last page
    ; because now that's where sprites are
    ldx mscr
    cpx #232 ; beginning of row 26
.LOOPBC
    bcs DRAWTRAIL ; upper bound check
    jsr GETRAND
    sta (mscr),y
DRAWTRAIL:
    ; draw color trail
    ldx #numcolors-1 ; color index
TRAILLOOP:
    ; see if (mcolor),y falls within screen boundary
    tya
    clc
    adc mcolor
    lda #0
    adc mcolor+1
    cmp #>COLMEM
    bcc NEXTTRAIL
    cmp #>COLMEM+PAGES
    bcs NEXTTRAIL
    lda COLORS,x
    sta (mcolor),y
NEXTTRAIL:
    lda mcolor
    sec
    sbc #WIDTH
    sta mcolor
    bcs NEXTTRAIL2
    dec mcolor+1
NEXTTRAIL2:
    dex
    bpl TRAILLOOP
    
LOOP2
    tya
    tax
    inc raindrops,x
    dey
    bpl LOOP1
ENDUT: 
; decrement LINNUM until zero
      LDA LINNUM
      BNE LABEL
      LDA LINNUM+1
      BEQ REALEND 
      DEC LINNUM+1
LABEL DEC LINNUM
      JMP LOOP
REALEND:
; restore old screen
 IF SCRMEM > $3FFF
    LDA #151
    STA $DD00
 ENDIF
  if (SCRMEM & $3FFF) != $0400
    LDA #21
    STA $D018
  ENDIF
  LDA #0
  STA $D015 ; disable all sprites

    rts

;
; Multiply a row number by WIDTH
;
MULROW:
        ; store value to be multiplied into
        ; low byte temporarily.
        sta mscr
        ldx #0
        stx mscr+1
        ; use a loop to build the appropriate
	; multiplication routine
MASKBIT SET $80 ; will cover each bit
TRAILING SET 1  ; trailing zeroes flag, will clear on
                ; first 1 bit found.
        ; loop through each bit
        REPEAT 8
        IF MASKBIT <= WIDTH ; skip if trailing 0
        IF TRAILING
        ; found leftmost '1' bit.
TRAILING SET 0 ; no longer need to skip trailing 0s
	; we can start shifting more bits from the right
        ELSE ; multiply by two
        asl
        rol mscr+1
        IF WIDTH & MASKBIT ; push a 1
        adc mscr
        bcc .+4
        inc mscr+1
        ENDIF ; whether to push a 1
        ENDIF ; whether we're flipping the trailing bit
        ENDIF ; whether we're in a trailing zero

MASKBIT SET MASKBIT >> 1

        REPEND
    ; write low byte
    sta mscr
    sta mcolor
    ; add high byte for screen memory
    lda mscr+1
    clc
    adc #>SCRMEM
    sta mscr+1
    ; add high byte for color memory
    adc #>COLMEM->SCRMEM
    sta mcolor+1
    rts

; use ROM as a substitute for random bytes

ROMRAND = $e000

GETRAND:
    inc RANDPTR
    bne GETRAND2
    inc RANDPTR+1
    bne GETRAND2
    lda #>ROMRAND
    sta RANDPTR+1
GETRAND2:
    lda ROMRAND
    rts


; macro to toggle bytes
; usage: TOGGLE offset,ypos
;   offset is the amount to add to the base SPRNUM
;   ypos is the Y position for this row of sprites
    MAC TOGGLE

.PTROFFSET = ({1} & 7) + SPRPTR
.YREGS = ({1} & 7) * 2 + $d001

    LDX #3
    LDY #6
.RLOOP
    TXA
    ADC SPRNUM
  IF {1} > 0
    ADC #{1}
  ENDIF
    STA .PTROFFSET,X
    LDA #{2}
    STA .YREGS,Y
    DEX
    DEY
    DEY
    BPL .RLOOP
    ENDM
;
; BIG RASTER THING
;

; at this scanline, toggle sprite pointers
 echo "RASTERMID", .
; While second row is being drawn, update third row
RASTERMID
    CLC
    TOGGLE 8,SPRY1+84
    NEXTRASTER RASTERBOT,160
    ASL $D019
    JMP $EA81

 echo "RASTERBOT", .
; While third row is being drawn, update fourth row
RASTERBOT
    CLC
    TOGGLE 12,SPRY1+126
    NEXTRASTER RASTERBLK,210
    ASL $D019
    JMP $EA81

; At bottom of screen, return first and second
; row to original positions
RASTERBLK
    CLC
    TOGGLE 0,SPRY1
    TOGGLE 4,SPRY1+42
    NEXTRASTER RASTERMID,120
    ASL $D019
    JMP $EA31 ; run actual keyboard buffer

    

RANDPTR = GETRAND2+1

COLORS:
    byte 0,5,0,5,5,13,5,13,13,1
ENDCOLORS

numcolors = ENDCOLORS-COLORS

; TODO: randomize in assembler?
; Memory for raindrop's vertical positions
; one raindrop for each column on the screen
raindrops: 
    byte 3,9,13,7,10,8,4,16
    byte 2,19,3,0,12,10,9,4
    byte 3,9,12,5,13,1
    IF WIDTH > 22
    byte 4,16,2,19,3
    IF WIDTH > 27
    byte 1,12,10,9,4
    byte 3,19,14,8,10,1,4,6
    ENDIF
    ENDIF

; calculate all sprite positions in advance
SPRX1 = 88
SPRY1 = 62
SPRPOS:
    byte SPRX1     ,SPRY1
    byte SPRX1+48  ,SPRY1
    byte SPRX1+96  ,SPRY1
    byte SPRX1+144 ,SPRY1
    byte SPRX1     ,SPRY1+42
    byte SPRX1+48  ,SPRY1+42
    byte SPRX1+96  ,SPRY1+42
    byte SPRX1+144 ,SPRY1+42
.HIGHX SET 0
    IF SPRX1+144 > 255
.HIGHX SET .HIGHX + $88
    ENDIF
    IF SPRX1+96 > 255
.HIGHX SET .HIGHX + $44
    ENDIF
    byte .HIGHX

